// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  firstName String
  lastName  String
  email     String      @unique
  password  String
  isAdmin   Boolean     @default(false)
  createdAt DateTime    @default(now()) @db.Timestamp(0)
  updatedAt DateTime    @updatedAt @db.Timestamp(0)
  news      News[]
  comments  Comments[]
  favorites Favorites[]

  @@map("users")
}

enum NewsType {
  NEWS
  OLD
}

model News {
  id        Int       @id @default(autoincrement())
  userId    Int
  title     String
  message   String    @db.Text
  image     String
  newsType  NewsType
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @db.Timestamp(0)
  deletedAt DateTime? @db.Timestamp(0)

  user      User        @relation(fields: [userId], references: [id])
  comments  Comments[]
  favorites Favorites[]

  @@map("news")
}

model Comments {
  id        Int       @id @default(autoincrement())
  newsId    Int
  userId    Int
  message   String    @db.Text
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @db.Timestamp(0)
  deletedAt DateTime? @db.Timestamp(0)

  news News @relation(fields: [newsId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Favorites {
  id        Int       @id @default(autoincrement())
  newsId    Int
  userId    Int
  deletedAt DateTime? @db.Timestamp(0)

  user User @relation(fields: [userId], references: [id])
  news News @relation(fields: [newsId], references: [id])

  @@map("favorites")
}
